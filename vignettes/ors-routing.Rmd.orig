---
title: "Introduction to the rors functions"
author: Jonas Lieth
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Introduction to the rors functions}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(rors)
library(leaflet)
library(units)
library(sf)
library(magrittr)
library(dplyr)
library(terra)
```

## Introduction

The `rors` package allows you to easily utilize the power and performance of OpenRouteService to generate routing data. After either setting up a local server or providing a link to an existing server (for details, refer to `vignette("ors-installation")`), you are ready to make requests using one of the package's functions. `rors` supports three OpenRouteService endpoints, namely:

-   Directions
    -   `ors_distances`, `ors_shortest_distances`, `ors_inspect`, `ors_summary`
-   Matrix
    -   `ors_matrix`
-   Isochrones
    -   `ors_accessibility`

This vignette will cover all of the above functions as well as ways to generate sample data and augment real-life data.

## Input data

First of all, we will need sample data:

```{r}
set.seed(123)
sample_a <- ors_sample(20, verbose = FALSE)

set.seed(234)
sample_b <- ors_sample(20)
```

What happens here is that the OSM file that was mounted to the Docker container is identified and read in. This can take some time since the file has to be vectortranslated by GDAL first. Using `sf::st_sample`, we can then find a geographic sample inside the boundaries of the mounted OSM file. The boundaries are stored in an environment cache and don't need to be loaded again after the first call of `ors_sample`:

```{r}
rut_boundaries <- get_extract_boundaries()
plot(rut_boundaries)
```

Yes, does look like the county of Rutland! If you need to load new boundaries - for example after changing the OSM file - you can do so by setting the argument `force_new_extract` to `TRUE`.

With that out of the way, let us inspect the sample data:

```{r}
head(sample_a)
```

Coordinates are stored in long format inside `sf` dataframes. Each row represents one point. The coordinate reference system is geographic and therefore the coordinates are notated in angular units. This is the default format for all routing functions.

## Routing distances

When we pass the sample data to `ors_distances`, the function computes route distances row-wise, i.e. from `sample_a[i, ]` to `sample_b[i, ]`. The route calculations are considerably influenced by the profile choice. Since cars a lot faster than bicycles, but cannot use smaller tracks, the routes will be significantly different. The result is a dataframe containing distances and durations of the computed routes:

```{r}
routes <- ors_distances(sample_a, sample_b, profile = "driving-car", radiuses = -1)
routes
```

```{r}
summary(routes$duration)
```

It is possible to return the route geometries, however, this can take a bit more time. In the following chunk, route geometries are computed and plotted by their duration:

```{r}
routes_geom <- ors_distances(
  sample_a,
  sample_b,
  profile = "driving-car",
  geometry = TRUE,
  radiuses = -1
)

leaflet() %>%
  addTiles() %>%
  addPolygons(data = rut_boundaries, fill = FALSE, color = "black", weight = 3) %>%
  addPolylines(data = routes_geom)
```

As you can see, the sample routes cover a large part of Rutland county. In order to prevent congestion, one could argue that all routes should lead to the country side instead of larger towns. To remove any uncertainties, let's prevent ORS from routing through the county city Oakham by providing a polygon to avoid:

```{r}
avoid_poly <- st_as_sfc(sf::st_bbox(c(
  xmin = -0.78,
  ymin = 52.65,
  xmax = -0.68,
  ymax = 52.69
), crs = 4326))

routes_geom <- ors_distances(
  sample_a,
  sample_b,
  profile = "driving-car",
  geometry = TRUE,
  radiuses = -1,
  avoid_polygons = avoid_poly
)

leaflet() %>%
  addTiles() %>%
  addPolygons(data = rut_boundaries, fill = FALSE, color = "black", weight = 3) %>%
  addPolylines(data = routes_geom) %>%
  addPolygons(data = avoid_poly, color = "red")
```

```{r}
summary(routes_geom$duration)
```

No routes are allowed to lead through (approximately) the region of Oakham. On average, the route duration increases by almost three minutes.

OpenRouteService supports a whole range of additional options for route processing. You could for example determine the type and specifications of your HGV, the amount of green you want to see on your walking route, the maximum driving speed, and so on.

A lot of the times, just routing from point A to point B is not enough. Let's say, instead of `sample_b`, you have a list of pharmacies and you need to analyze the health care accessibility of a list of vulnerable households. You might want to identify the shortest route from each household to the nearest pharmacy. First, to get a list of all pharmacies in the district of Rutland:

```{r}
pharmacies <- get_osm_pois(rut_boundaries, amenity = "pharmacy", timeout = 100)
pharmacies
```

This function call makes an Overpass query that searches for every hospital inside the boundaries of Rutland. You can pass map features by passing additional arguments where the argument name stands for the feature key and the argument value stands for the feature value.

While we could directly process this dataframe, we would need to route from each point in `sample_a` to each point in `hospitals`. In this case, we only have 30 hospitals and the extra charge in processing time is probably endurable, but it's generally a good idea to keep the datasets as small as possible:

```{r}
nearest_pharmacies <- group_by_proximity(
  sample_a,
  pharmacies,
  number_of_points = 5,
  crs = 4326
)
nearest_pharmacies[1:3]
```

In this step, we select 5 points for each point that have the lowest linear distance to the respective point. This is not as accurate as actual routing but it helps to minimize the processing load. Finally, we can find the nearest hospitals:

```{r}
fastest_route <- ors_shortest_distances(
  sample_a,
  nearest_pharmacies,
  profile = "driving-car",
  geometry = TRUE,
  radiuses = -1,
  proximity_type = "duration"
)
fastest_route
```

```{r}
leaflet() %>%
  addTiles() %>%
  addPolygons(data = rut_boundaries, fill = FALSE, color = "black", weight = 3) %>%
  addPolylines(data = nearest_hospitals)
```

```{r}
summary(nearest_hospitals$duration)
```

Looks like the average household can reach the nearest hospital in around 11 minutes, which is pretty fast. One route strikes the eye though. The most Southern route has the highest distance among all computed routes and might therefore be good example to showcase the route inspection.

## Route inspection

Route inspection explores a singular route much deeper than both route distance functions. You are able to return all line segments of a geometry including additional information like elevation or way type for each segment. To demonstrate, we will first select the route with the highest distance:

```{r}
sorted_routes <- arrange(nearest_hospitals, desc(duration))
es_source <- sorted_routes$point_number[1]
es_dest <- sorted_routes$poi_number[1]
```

We can then extract a lot of fancy route information and produce a fancy elevation profile

```{r}
infos <- c("elevation", "steepness", "suitability")
long_route <- ors_inspect(
  sample_a[es_source, ],
  nearest_pharmacies[[es_source]][es_dest, ],
  profile = "driving-car",
  attributes = TRUE,
  radiuses = -1,
  extra_info = infos)
long_route
```

```{r}
plot_section(
  long_route,
  feat = "steepness",
  palette = hcl.colors(11, palette = "Roma")
)
```

## Accessibility analysis

To conduct an accessibility analysis, OpenRouteService provides the powerful Isochrones endpoint. Ischrones can be generated using `ors_accessibility`. Let's use the pharmacy data to create a beautiful visualization of how much time you would need to drive to each pharmacy from any point within Rutland:

```{r}
time_needed <- ors_accessibility(
  source = pharmacies,
  range = seq(100, 1000, 100),
  location_type = "destination",
  rasterize = TRUE
)
```

```{r}
terra::plot(time_needed)
```

OpenRouteService itself can only return isochrones as vector data. `rors` adds a `rasterize` argument to turn these isochrones into a pretty accessibility map that is able to combine multiple isochrone datasets into a single, comprehensible raster image.

## Additional remarks

Aside from the functions mentioned here, the package comes with a few additional functionalities:

-   You can generate many-to-many routing matrices using `ors_distances`
-   You can create a summary for a single route using `ors_summary`
-   Aside from `get_extract_boundaries`, you can get ORS instance information using `ors_ready` and `get_profiles`

Additionally, the functions mentioned here only cover the Directions, Isochrones and Matrix service from the OpenRouteService API. Using the web API, you can just as well query Pelias geocoding or OpenPoiService.

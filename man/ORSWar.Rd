% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/war.R
\name{ORSWar}
\alias{ORSWar}
\title{ORS WAR instance}
\description{
\strong{This R6 class is currently non-functional.} I am currently not
aware of any reliable way to assert that Tomcat and JRE are up and running.
If you can help, please consider opening a pull request here:
\url{https://github.com/jslth/rors}.

Creates a new ORS instance object that operates on a WAR instance of
OpenRouteservice, i.e. an instance that is started using a .war file.
This R6 class is typically constructed by \code{\link{ors_instance}}.
\code{ORSJar} requires Tomcat >= 10 to be installed on the system.
Tomcat requires a Java Runtime Environment (JRE) to run. Additionally,
both \code{JAVA_HOME} and \code{CATALINA_HOME} environment variables must
be set to start Tomcat. If these requirements cannot be met, consider using
\code{\link{ORSDocker}} or \code{\link{ORSJar}}.

For technical details on the setup of local ORS instances, refer to the
\href{https://giscience.github.io/openrouteservice/run-instance/running-war}{Running WAR documentation}.
For details on how to use \code{ORSDocker} objects, refer to the installation
vignette:

\preformatted{
vignette("ors-installation", package = "rors")
}
}
\section{Super classes}{
\code{\link[rors:ORSInstance]{rors::ORSInstance}} -> \code{\link[rors:ORSLocal]{rors::ORSLocal}} -> \code{ORSWar}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ORSWar-new}{\code{ORSWar$new()}}
\item \href{#method-ORSWar-clone}{\code{ORSWar$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSInstance" data-id="get_status"><a href='../../rors/html/ORSInstance.html#method-ORSInstance-get_status'><code>rors::ORSInstance$get_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSInstance" data-id="get_url"><a href='../../rors/html/ORSInstance.html#method-ORSInstance-get_url'><code>rors::ORSInstance$get_url()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSInstance" data-id="is_mounted"><a href='../../rors/html/ORSInstance.html#method-ORSInstance-is_mounted'><code>rors::ORSInstance$is_mounted()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSInstance" data-id="is_ready"><a href='../../rors/html/ORSInstance.html#method-ORSInstance-is_ready'><code>rors::ORSInstance$is_ready()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="add_profiles"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-add_profiles'><code>rors::ORSLocal$add_profiles()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="report"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-report'><code>rors::ORSLocal$report()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="rm_extract"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-rm_extract'><code>rors::ORSLocal$rm_extract()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="rm_profiles"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-rm_profiles'><code>rors::ORSLocal$rm_profiles()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="set_endpoints"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-set_endpoints'><code>rors::ORSLocal$set_endpoints()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="set_extract"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-set_extract'><code>rors::ORSLocal$set_extract()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rors" data-topic="ORSLocal" data-id="update"><a href='../../rors/html/ORSLocal.html#method-ORSLocal-update'><code>rors::ORSLocal$update()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ORSWar-new"></a>}}
\if{latex}{\out{\hypertarget{method-ORSWar-new}{}}}
\subsection{Method \code{new()}}{
Initialize the ORSWar object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSWar$new(dir, version = NULL, overwrite = FALSE, verbose = TRUE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{\code{[character]}

Custom OpenRouteService directory. If not specified, the war file will
be downloaded to the current working directory. If a directory called
\code{"openrouteservice-{version}"} is present, the download will be skipped.
Ignored if \code{server} is not \code{NULL}.}

\item{\code{version}}{\code{[character]}

The OpenRouteService version to use. Can either be a version number (e.g.
8.1.1) or \code{"master"}. Defaults to the most recent supported version.}

\item{\code{overwrite}}{\code{[logical]}

Whether to overwrite the current OpenRouteService directory if it exists.}

\item{\code{verbose}}{\code{[logical]}

Level of verbosity. If \code{TRUE}, shows informative warnings and messages,
spinners, progress bars and system notifications.}

\item{\code{...}}{Not used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ORSWar-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ORSWar-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ORSWar$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/group.R
\name{group_by_proximity}
\alias{group_by_proximity}
\title{Group a dataset for routing}
\usage{
group_by_proximity(src, dst, n = NULL, radius = NULL)
}
\arguments{
\item{src}{\code{[sf/sfc]}

Source dataset containing point geometries that should be routed from.}

\item{dst}{\code{[sf]}

Dataset that represents a list of destination points to be routed to for each
row in the source dataset. For each point in \code{src}, a number of
nearest points in \code{dst} is selected.}

\item{n}{\code{[numeric]}

Maximum number of points of interest around each point in the source dataset
that shall be returned. The actual number might be lower depending on the
rows in the \code{dst} dataset and the remaining number of points if
\code{radius} is not \code{NULL}. If \code{NULL}, \code{radius} must be
provided.}

\item{radius}{\code{[numeric]}

Maximum distance of a point of interest around each point in the source
dataset. All returned points of interest lie within this distance to the
source points. If \code{NULL}, \code{n} must be provided.}
}
\value{
Returns an \code{sf} dataframe containing a \code{.group}
specifying the row in \code{src} for which the closest point in dst
is specified. The \code{geometry} column can contain duplicated geometries
because a point can be a closest point to multiple rows in \code{src}.
}
\description{
Groups a dataset containing points of interest based on their
proximity to a source dataset. Proximity can be defined through nearest
neighbors (argument \code{n}) and/or a distance buffer (\code{radius}).
The grouped output can be used as an input to
\code{\link{ors_shortest_distances}}. Note that unlike other \code{rors}
functions, this function is not based on routing but on linear Euclidean
distances and is primarily used to pre-select points of interest and
save computing time.
}
\examples{
library(sf)
src <- pharma[1:4, ]
dst <- pharma[5:8, ]

# group by n nearest points
group_by_proximity(src, dst, n = 2)

# group by distance threshold
group_by_proximity(src, dst, radius = 5000)

# group by distance and then by nearest points
group_by_proximity(src, dst, n = 2, radius = 5000)
}

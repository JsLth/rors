% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/guess.R
\name{ors_guess}
\alias{ors_guess}
\title{Guess extract boundaries}
\usage{
ors_guess(
  poly = NULL,
  n = 1000,
  radius = 1000,
  type = "regular",
  poly_fun = sf::st_convex_hull,
  instance = NULL,
  ...
)
}
\arguments{
\item{poly}{\code{[various]}

An \code{sf/sfc} object or any object that can be parsed by
\code{\link[sf]{st_bbox}}. If \code{NULL}, defaults to global
boundaries. Needed to narrow down the area of guessing. For best results,
\code{poly} should be as small and precise as possible.}

\item{n}{\code{[integer]}

Number of points to sample. More points mean slower but more precise
guess work.}

\item{radius}{\code{[numeric]}

Snapping radius. Points are only snapped to a street if the street lies
within this distance to the source point.}

\item{type}{\code{[character]}

Spatial sampling type. For details, see \code{\link[sf]{st_sample}}.}

\item{poly_fun}{\code{[function]}

Function to derive a boundary polygon from successfully snapped points.
Defaults to \code{\link[sf]{st_convex_hull}}. Other useful functions are
\code{\link[sf]{st_concave_hull}} and \code{\link[sf]{st_polygonize}}.}

\item{instance}{\code{[ors_instance]}

Object of an OpenRouteService instance that should be used for route
computations. It is recommended to use \code{\link{ors_instance}}
to set an instance globally. This argument should only be used if activating
an instance globally is not feasible.}

\item{...}{Further arguments passed to \code{poly_fun}}

\item{progress}{\code{[logical]}

Whether to show a progress bar for longer operations.}
}
\value{
An \code{sfc} polygon that approximately represents the
boundaries of the current ORS extract.
}
\description{
Makes reasonable guesses about the boundaries of the OpenStreetMap extract
mounted to the active ORS instance. \code{ors_guess} samples points over
a specified area and tries to snap these points to the nearest defined
street. It is a simple wrapper around \code{\link{ors_snap}}.

This function can be useful to validate an ORS setup or to find the
extract area of a remote (non-official) ORS server.
}
\note{
\code{ors_guess} usually has to make a lot of requests.
If you are rate-limited, you are \strong{strongly} advised against the usage
of this function.
}
\examples{
\dontrun{
bounds <- get_extract_boundaries()
bounds <- sf::st_buffer(bounds, 10000)
plot(bounds)

bounds2 <- ors_guess(bounds)
plot(bounds2, add = TRUE)

bounds3 <- ors_guess(bounds, n = 10000)
plot(bounds3, add = TRUE)

bounds4 <- ors_guess(bounds, poly_fun = sf::st_concave_hull, ratio = 0)
plot(bounds4, add = TRUE)}
}

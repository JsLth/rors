% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matrix.R
\name{ors_matrix}
\alias{ors_matrix}
\title{Routing distance matrix}
\usage{
ors_matrix(
  src,
  dst = NULL,
  profile = NULL,
  units = c("m", "km", "mi"),
  proximity_type = c("distance", "duration"),
  instance = NULL
)
}
\arguments{
\item{src}{\code{[sf/sfc]}

Source dataset containing point geometries that should be routed from.}

\item{dst}{\code{[sf/sfc]}

Destination dataset containing point geometries that should be routed to.
If \code{NULL}, only routes between points in \code{src}.}

\item{profile}{\code{[character]}

Means of transport as supported by OpenRouteService.
Defaults to the first profile in a call to \code{\link{get_profiles}}.
For \code{ors_shortest_distances}, \code{profile} can be a character
vector, for all other functions it needs to be a character scalar.
For details on all profiles, refer to the
\href{https://giscience.github.io/openrouteservice/documentation/Tag-Filtering.html}{documentation}.}

\item{units}{\code{[character]}

Distance unit for distance calculations (\code{"m"}, \code{"km"} or
\code{"mi"})}

\item{proximity_type}{\code{[character]}

Type of proximity that the calculations should be
based on. If \code{distance}, the shortest physical distance will be calculated
and if \code{duration}, the shortest temporal distance will be calculated.}

\item{instance}{\code{[ors_instance]}

Object of an OpenRouteService instance that should be used for route
computations. It is recommended to use \code{\link{ors_instance}}
to set an instance globally. This argument should only be used if activating
an instance globally is not feasible.}
}
\value{
A distance matrix.
}
\description{
Calls the matrix service and returns a routing distance matrix.
}
\examples{
if (any_mounted() && ors_ready()) {
  # compute distances from each row to each other row
  ors_matrix(pharma)

  # if two datasets are provided, route from each row in `src` to each row in `dst`
  ors_matrix(pharma[1:4, ], pharma[5:8, ])

  # distance matrices can be based on time or physical distance
  ors_matrix(pharma, proximity_type = "duration")

  # units can be adjusted
  ors_matrix(pharma, units = "km")
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-ors.R
\name{get_instance}
\alias{get_instance}
\alias{ors_status}
\alias{get_profiles}
\alias{ors_ready}
\alias{any_mounted}
\title{Utility functions}
\usage{
get_instance()

ors_status(url = NULL, force = TRUE)

get_profiles(url = NULL, force = TRUE)

ors_ready(url = NULL, force = TRUE, error = FALSE)

any_mounted()
}
\arguments{
\item{url}{\code{[character]}

URL of an ORS server. Defaults to the the URL of the currently mounted
ORS instance. This argument exists as a way to explicitly specify the URL
to query in case the instance cannot easily be determined. For normal use,
this argument should not need to be specfied.}

\item{force}{\code{[logical]}

If \code{TRUE}, function must query server. If \code{FALSE}, the information
will be read from the cache if possible. This argument is specially useful
automated workflows where it is inconvenient to query the server
unnecessarily often. Functions like \code{\link{ors_pairwise}} or
\code{\link{ors_inspect}} generally do not force server requests for these
functions in order to make subsequent calls faster. When running directly,
this argument should stay \code{TRUE} to ensure the accuracy of the output.}

\item{error}{\code{[logical]}

If \code{TRUE}, gives out an error if the service is not ready.}
}
\value{
\code{get_instance} returns an object of class \code{ors_instance}.
\code{ors_status} returns a list of information on the running service.
\code{ors_ready} returns a length-1 logical vector specifying if the service
is running. \code{get_profiles} returns a vector containing the active
profiles. \code{any_mounted} returns a length-1 logical.
}
\description{
Utility functions to aid the setup of local instances.
\itemize{
\item \code{get_instance} checks for the existence of a mounted instance in
the current session and returns it.
\item \code{ors_status} returns the status reported by the ORS server.
\item \code{ors_ready} checks if the mounted service is ready to use.
\item \code{get_profiles} is a wrapper around \code{get_status} that returns
the active profiles of the mounted service.
\item \code{any_mounted} checks if an instance is mounted to the current
session.
}
}
\section{Caching}{


The following functions make use of a "runtime" caching system:
\code{ors_ready()}, \code{ors_status()}, \code{get_profiles()},
\code{get_extract_boundaries()}, \code{ors_sample()}. This means that,
if \code{force = FALSE}, previously generated output is re-used instead
of sending new requests. This can be particularly useful in automated
workflows like loops where speed is important. When run directly, caching
should not be necessary, which is why \code{force = FALSE} is the default
of most of these functions (except \code{get_extract_boundaries()} because
it deals with potentially much larger amounts of data).

"Runtime" in this context refers to the runtime of an ORS instance, i.e.
the time after it is started. Cached results should only be valid for a
specific runtime and discarded afterwards. After starting or stopping
an instance or when mounting a new instance, the runtime cache is cleared
so that fresh requests must be made.
}

\examples{
# initialize an ORS instance
ors <- ors_instance(dir = tempdir(), dry = TRUE)

# confirm that instance was mounted
any_mounted() # TRUE

# retrieve the instance object
get_instance()

# check if the service is ready
ors_ready()

# assert the ready status
try(ors_ready(error = TRUE))

\dontrun{
# the following functions require a running service
# retrieve a list of service options from the server
ors_status()

# retrieve a list of active profiles that can be used
get_profiles()
}
}
\seealso{
\code{\link{ors_instance}}
}
